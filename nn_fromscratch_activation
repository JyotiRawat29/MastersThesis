#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Jul 15 17:10:10 2021

@author: jyoti
"""
import numpy as np
import nnfs
from nnfs.datasets import spiral_data

nnfs.init()



class Layer_Dense:
    def __init__(self, n_inputs, n_neurons):
        self.weights =  0.10 * np.random.randn(n_inputs, n_neurons)
        self.biases = np.zeros((1,n_neurons))
    
    def forward(self, inputs):
        self.output = np.dot(inputs, self.weights) + self.biases
    
class Activation_ReLU:
    def forward(self, inputs):
        self.output = np.maximum(0, inputs)

class Activation_Softmax:
    def forward(self, inputs):
        exp_values = np.exp(inputs - np.max(inputs, axis = 1, keepdims = True))
        probabilities = exp_values / np.sum(exp_values, axis = 1, keepdims = True)
        self.output = probabilities
        
X,y = spiral_data(samples = 100, classes = 3)

dense1 = Layer_Dense(2,3) # here we created the layers we want to create so dense 1 is input layer
activation1 = Activation_ReLU()

dense2 = Layer_Dense(3,3) # hidden layer 1 , in this case it is output layer as well 
activation2 = Activation_Softmax()

dense1.forward(X) # from here we begin to pass the data
activation1.forward(dense1.output)

dense2.forward(activation2.output)
activation2.forward(dense2.output)

print(activation2.output[:5])